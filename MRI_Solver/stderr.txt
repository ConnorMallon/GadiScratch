 Activating environment at `/scratch/bt62/cm8825/MRI_Solver/Project.toml`
┌ Warning: `CSV.read(input; kw...)` is deprecated in favor of `using DataFrames; CSV.read(input, DataFrame; kw...)
│   caller = read at CSV.jl:40 [inlined]
└ @ Core ~/.julia/packages/CSV/MKemC/src/CSV.jl:40
ERROR: LoadError: DimensionMismatch("arrays could not be broadcast to a common size; got a dimension with lengths 4 and 0")
Stacktrace:
 [1] _bcs1 at ./broadcast.jl:487 [inlined]
 [2] _bcs at ./broadcast.jl:484 [inlined]
 [3] broadcast_shape at ./broadcast.jl:478 [inlined]
 [4] kernel_cache(::Gridap.Arrays.BCasted{typeof(*)}, ::Array{Int64,1}, ::Array{Float64,2}) at /home/565/cm8825/.julia/dev/Gridap/src/Arrays/Kernels.jl:231
 [5] kernel_cache(::Gridap.Fields.FieldOpKernel{typeof(*)}, ::Array{Int64,1}, ::Array{Float64,2}) at /home/565/cm8825/.julia/dev/Gridap/src/Fields/FieldOperations.jl:112
 [6] kernel_testitem(::Gridap.Fields.FieldOpKernel{typeof(*)}, ::Array{Int64,1}, ::Vararg{Any,N} where N) at /home/565/cm8825/.julia/dev/Gridap/src/Arrays/Kernels.jl:179
 [7] Gridap.Arrays.AppliedArray(::FillArrays.Fill{Gridap.Fields.FieldOpKernel{typeof(*)},1,Tuple{Base.OneTo{Int64}}}, ::Gridap.Arrays.AppliedArray{Array{Int64,1},1,Tuple{FillArrays.Fill{Int64,1,Tuple{Base.OneTo{Int64}}},Gridap.Arrays.CompressedArray{Array{Gridap.TensorValues.VectorValue{2,Float64},1},1,Array{Array{Gridap.TensorValues.VectorValue{2,Float64},1},1},Array{Int8,1}}},FillArrays.Fill{Gridap.Fields.Eval,1,Tuple{Base.OneTo{Int64}}}}, ::Vararg{AbstractArray,N} where N) at /home/565/cm8825/.julia/dev/Gridap/src/Arrays/Apply.jl:176
 [8] apply at /home/565/cm8825/.julia/dev/Gridap/src/Arrays/Apply.jl:105 [inlined]
 [9] apply at /home/565/cm8825/.julia/dev/Gridap/src/Arrays/Apply.jl:61 [inlined]
 [10] #15 at /home/565/cm8825/.julia/dev/Gridap/src/Fields/FieldOperations.jl:318 [inlined]
 [11] map at ./tuple.jl:157 [inlined]
 [12] apply(::Gridap.Fields.FieldOpKernel{typeof(*)}, ::Gridap.Arrays.AppliedArray{Array{Int64,1},1,Tuple{FillArrays.Fill{Int64,1,Tuple{Base.OneTo{Int64}}},Gridap.Arrays.CompressedArray{Array{Gridap.TensorValues.VectorValue{2,Float64},1},1,Array{Array{Gridap.TensorValues.VectorValue{2,Float64},1},1},Array{Int8,1}}},FillArrays.Fill{Gridap.Fields.Eval,1,Tuple{Base.OneTo{Int64}}}}, ::Gridap.Arrays.VectorOfBlockArrayCoo{Gridap.Arrays.BlockArrayCoo{Float64,2,Array{Float64,2},Tuple{BlockArrays.BlockedUnitRange{Array{Int64,1}},BlockArrays.BlockedUnitRange{Array{Int64,1}}}},2,Tuple{Gridap.Arrays.AppliedArray{Array{Float64,2},1,Tuple{Gridap.Arrays.AppliedArray{Array{Gridap.TensorValues.VectorValue{3,Float64},1},1,Tuple{Gridap.Arrays.CompressedArray{Array{Float64,2},1,Array{Array{Float64,2},1},Array{Int8,1}},Gridap.Arrays.LocalToGlobalArray{Gridap.TensorValues.VectorValue{3,Float64},1,1,Gridap.Arrays.Table{Int64,Array{Int64,1},Array{Int32,1}},Array{Gridap.TensorValues.VectorValue{3,Float64},1}}},FillArrays.Fill{Gridap.Fields.LinCom,1,Tuple{Base.OneTo{Int64}}}}},Gridap.Arrays.CompressedArray{Gridap.Polynomials.BasisFromChangeOfBasis{Gridap.Polynomials.MonomialBasis{3,Float64},Array{Float64,2}},1,Array{Gridap.Polynomials.BasisFromChangeOfBasis{Gridap.Polynomials.MonomialBasis{3,Float64},Array{Float64,2}},1},Array{Int8,1}}}},Gridap.Arrays.AppliedArray{Tuple{BlockArrays.BlockedUnitRange{Array{Int64,1}},BlockArrays.BlockedUnitRange{Array{Int64,1}}},1,Tuple{Gridap.Arrays.CompressedArray{Array{Gridap.TensorValues.VectorValue{2,Float64},1},1,Array{Array{Gridap.TensorValues.VectorValue{2,Float64},1},1},Array{Int8,1}},Gridap.Arrays.AppliedArray{Tuple{BlockArrays.BlockedUnitRange{Array{Int64,1}}},1,Tuple{Gridap.Arrays.Reindexed{Tuple{Base.OneTo{Int64}},1,Array{Tuple{Base.OneTo{Int64}},1},Array{Int32,1}},Gridap.Arrays.Reindexed{Tuple{Base.OneTo{Int64}},1,Array{Tuple{Base.OneTo{Int64}},1},Array{Int32,1}}},FillArrays.Fill{typeof(Gridap.Fields._cat_axes),1,Tuple{Base.OneTo{Int64}}}}},FillArrays.Fill{typeof(Gridap.Fields._new_axes),1,Tuple{Base.OneTo{Int64}}}},Tuple{Gridap.Arrays.AppliedArray{Array{Float64,2},1,Tuple{Gridap.Arrays.AppliedArray{Tuple{BlockArrays.BlockedUnitRange{Array{Int64,1}},BlockArrays.BlockedUnitRange{Array{Int64,1}}},1,Tuple{Gridap.Arrays.CompressedArray{Array{Gridap.TensorValues.VectorValue{2,Float64},1},1,Array{Array{Gridap.TensorValues.VectorValue{2,Float64},1},1},Array{Int8,1}},Gridap.Arrays.AppliedArray{Tuple{BlockArrays.BlockedUnitRange{Array{Int64,1}}},1,Tuple{Gridap.Arrays.Reindexed{Tuple{Base.OneTo{Int64}},1,Array{Tuple{Base.OneTo{Int64}},1},Array{Int32,1}},Gridap.Arrays.Reindexed{Tuple{Base.OneTo{Int64}},1,Array{Tuple{Base.OneTo{Int64}},1},Array{Int32,1}}},FillArrays.Fill{typeof(Gridap.Fields._cat_axes),1,Tuple{Base.OneTo{Int64}}}}},FillArrays.Fill{typeof(Gridap.Fields._new_axes),1,Tuple{Base.OneTo{Int64}}}}},FillArrays.Fill{Gridap.Arrays.var"#60#61"{Array{Float64,2},Tuple{Int64,Int64}},1,Tuple{Base.OneTo{Int64}}}}}}) at /home/565/cm8825/.julia/dev/Gridap/src/Fields/FieldOperations.jl:318
 [13] kernel_evaluate(::Gridap.Fields.Valued{Gridap.Fields.FieldOpKernel{typeof(*)}}, ::Gridap.Arrays.CompressedArray{Array{Gridap.TensorValues.VectorValue{2,Float64},1},1,Array{Array{Gridap.TensorValues.VectorValue{2,Float64},1},1},Array{Int8,1}}, ::FillArrays.Fill{Int64,1,Tuple{Base.OneTo{Int64}}}, ::Gridap.Fields.VectorOfBlockBasisCoo) at /home/565/cm8825/.julia/dev/Gridap/src/Fields/FieldArrays.jl:275
 [14] evaluate_field_array at /home/565/cm8825/.julia/dev/Gridap/src/Fields/FieldArrays.jl:79 [inlined]
 [15] _evaluate_field_arrays at /home/565/cm8825/.julia/dev/Gridap/src/Fields/FieldArrays.jl:51 [inlined]
 [16] evaluate_field_arrays(::Tuple{Gridap.Arrays.AppliedArray{Gridap.Fields._UnimplementedField,1,Tuple{FillArrays.Fill{Int64,1,Tuple{Base.OneTo{Int64}}},Gridap.Fields.VectorOfBlockBasisCoo},FillArrays.Fill{Gridap.Fields.Valued{Gridap.Fields.FieldOpKernel{typeof(*)}},1,Tuple{Base.OneTo{Int64}}}},FillArrays.Fill{Float64,1,Tuple{Base.OneTo{Int64}}}}, ::Gridap.Arrays.CompressedArray{Array{Gridap.TensorValues.VectorValue{2,Float64},1},1,Array{Array{Gridap.TensorValues.VectorValue{2,Float64},1},1},Array{Int8,1}}) at /home/565/cm8825/.julia/dev/Gridap/src/Fields/FieldArrays.jl:47
 [17] kernel_evaluate(::Gridap.Fields.Valued{Gridap.Fields.FieldOpKernel{typeof(*)}}, ::Gridap.Arrays.CompressedArray{Array{Gridap.TensorValues.VectorValue{2,Float64},1},1,Array{Array{Gridap.TensorValues.VectorValue{2,Float64},1},1},Array{Int8,1}}, ::Gridap.Arrays.AppliedArray{Gridap.Fields._UnimplementedField,1,Tuple{FillArrays.Fill{Int64,1,Tuple{Base.OneTo{Int64}}},Gridap.Fields.VectorOfBlockBasisCoo},FillArrays.Fill{Gridap.Fields.Valued{Gridap.Fields.FieldOpKernel{typeof(*)}},1,Tuple{Base.OneTo{Int64}}}}, ::FillArrays.Fill{Float64,1,Tuple{Base.OneTo{Int64}}}) at /home/565/cm8825/.julia/dev/Gridap/src/Fields/FieldArrays.jl:274
 [18] evaluate_field_array at /home/565/cm8825/.julia/dev/Gridap/src/Fields/FieldArrays.jl:79 [inlined]
 [19] integrate(::Gridap.Arrays.AppliedArray{Gridap.Fields._UnimplementedField,1,Tuple{Gridap.Arrays.AppliedArray{Gridap.Fields._UnimplementedField,1,Tuple{FillArrays.Fill{Int64,1,Tuple{Base.OneTo{Int64}}},Gridap.Fields.VectorOfBlockBasisCoo},FillArrays.Fill{Gridap.Fields.Valued{Gridap.Fields.FieldOpKernel{typeof(*)}},1,Tuple{Base.OneTo{Int64}}}},FillArrays.Fill{Float64,1,Tuple{Base.OneTo{Int64}}}},FillArrays.Fill{Gridap.Fields.Valued{Gridap.Fields.FieldOpKernel{typeof(*)}},1,Tuple{Base.OneTo{Int64}}}}, ::Gridap.Arrays.CompressedArray{Array{Gridap.TensorValues.VectorValue{2,Float64},1},1,Array{Array{Gridap.TensorValues.VectorValue{2,Float64},1},1},Array{Int8,1}}, ::Gridap.Arrays.CompressedArray{Array{Float64,1},1,Array{Array{Float64,1},1},Array{Int8,1}}, ::Gridap.Arrays.AppliedArray{Gridap.Fields.LinComField{Gridap.Fields.FieldGrad{Gridap.Polynomials.BasisFromChangeOfBasis{Gridap.Polynomials.MonomialBasis{2,Float64},Array{Float64,2}}},Array{Gridap.TensorValues.VectorValue{3,Float64},1}},1,Tuple{Gridap.Arrays.CompressedArray{Gridap.Fields.FieldGrad{Gridap.Polynomials.BasisFromChangeOfBasis{Gridap.Polynomials.MonomialBasis{2,Float64},Array{Float64,2}}},1,Array{Gridap.Fields.FieldGrad{Gridap.Polynomials.BasisFromChangeOfBasis{Gridap.Polynomials.MonomialBasis{2,Float64},Array{Float64,2}}},1},Array{Int8,1}},Gridap.Arrays.LocalToGlobalArray{Gridap.TensorValues.VectorValue{3,Float64},1,1,Gridap.Arrays.Table{Int64,Array{Int64,1},Array{Int32,1}},Array{Gridap.TensorValues.VectorValue{3,Float64},1}}},FillArrays.Fill{Gridap.Fields.LinComValued,1,Tuple{Base.OneTo{Int64}}}}) at /home/565/cm8825/.julia/dev/Gridap/src/Fields/Integrate.jl:17
 [20] integrate(::Gridap.CellData.GenericCellField{true,(Colon(),)}, ::Gridap.Arrays.AppliedArray{Gridap.Fields.LinComField{Gridap.Polynomials.BasisFromChangeOfBasis{Gridap.Polynomials.MonomialBasis{2,Float64},Array{Float64,2}},Array{Gridap.TensorValues.VectorValue{3,Float64},1}},1,Tuple{Gridap.Arrays.CompressedArray{Gridap.Polynomials.BasisFromChangeOfBasis{Gridap.Polynomials.MonomialBasis{2,Float64},Array{Float64,2}},1,Array{Gridap.Polynomials.BasisFromChangeOfBasis{Gridap.Polynomials.MonomialBasis{2,Float64},Array{Float64,2}},1},Array{Int8,1}},Gridap.Arrays.LocalToGlobalArray{Gridap.TensorValues.VectorValue{3,Float64},1,1,Gridap.Arrays.Table{Int64,Array{Int64,1},Array{Int32,1}},Array{Gridap.TensorValues.VectorValue{3,Float64},1}}},FillArrays.Fill{Gridap.Fields.LinComValued,1,Tuple{Base.OneTo{Int64}}}}, ::Gridap.CellData.CellQuadrature) at /home/565/cm8825/.julia/dev/Gridap/src/CellData/CellQuadratures.jl:108
 [21] integrate(::Gridap.CellData.GenericCellField{true,(Colon(),)}, ::GridapEmbedded.Interfaces.FacetSubTriangulationWrapper{2,3,Float64}, ::Gridap.CellData.CellQuadrature) at /home/565/cm8825/.julia/dev/Gridap/src/Geometry/Triangulations.jl:273
 [22] get_cell_vector(::Gridap.FESpaces.FESourceFromIntegration, ::Gridap.MultiField.MultiFieldCellField{true,(Colon(),)}) at /home/565/cm8825/.julia/dev/Gridap/src/FESpaces/FETerms.jl:353
 [23] get_cell_matrix_and_vector(::Gridap.FESpaces.FESourceFromIntegration, ::Gridap.MultiField.MultiFieldFEFunction{Gridap.MultiField.MultiFieldCellField{true,()}}, ::Gridap.MultiField.MultiFieldCellField{true,(1, Colon())}, ::Gridap.MultiField.MultiFieldCellField{true,(Colon(),)}) at /home/565/cm8825/.julia/dev/Gridap/src/FESpaces/FETerms.jl:107
 [24] collect_cell_matrix_and_vector(::Gridap.MultiField.MultiFieldFEFunction{Gridap.MultiField.MultiFieldCellField{true,()}}, ::Gridap.MultiField.MultiFieldCellField{true,(1, Colon())}, ::Gridap.MultiField.MultiFieldCellField{true,(Colon(),)}, ::Tuple{Gridap.FESpaces.AffineFETermFromIntegration,Gridap.FESpaces.AffineFETermFromIntegration,Gridap.FESpaces.FESourceFromIntegration,Gridap.FESpaces.LinearFETermFromIntegration}) at /home/565/cm8825/.julia/dev/Gridap/src/FESpaces/FETerms.jl:221
 [25] Gridap.FESpaces.AffineFEOperator(::Gridap.MultiField.MultiFieldFESpace{Gridap.MultiField.ConsecutiveMultiFieldStyle,false}, ::Gridap.MultiField.MultiFieldFESpace{Gridap.MultiField.ConsecutiveMultiFieldStyle,false}, ::Gridap.FESpaces.GenericSparseMatrixAssembler{SparseArrays.SparseMatrixCSC{Float64,Int64},Array{Float64,1}}, ::Gridap.FESpaces.AffineFETermFromIntegration, ::Vararg{Gridap.FESpaces.AffineFETerm,N} where N) at /home/565/cm8825/.julia/dev/Gridap/src/FESpaces/AffineFEOperators.jl:35
 [26] Gridap.FESpaces.AffineFEOperator(::Gridap.MultiField.MultiFieldFESpace{Gridap.MultiField.ConsecutiveMultiFieldStyle,false}, ::Gridap.MultiField.MultiFieldFESpace{Gridap.MultiField.ConsecutiveMultiFieldStyle,false}, ::Gridap.FESpaces.AffineFETermFromIntegration, ::Vararg{Gridap.FESpaces.AffineFETerm,N} where N) at /home/565/cm8825/.julia/dev/Gridap/src/FESpaces/AffineFEOperators.jl:48
 [27] SolveStokes(::Int64) at /scratch/bt62/cm8825/MRI_Solver/Solver.jl:266
 [28] top-level scope at /scratch/bt62/cm8825/MRI_Solver/Solver.jl:404
 [29] include(::Module, ::String) at ./Base.jl:377
 [30] exec_options(::Base.JLOptions) at ./client.jl:288
 [31] _start() at ./client.jl:484
in expression starting at /scratch/bt62/cm8825/MRI_Solver/Solver.jl:404
