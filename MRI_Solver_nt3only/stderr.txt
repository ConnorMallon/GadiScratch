 Activating environment at `/scratch/bt62/cm8825/MRI_Solver_nt3only/Project.toml`
ERROR: LoadError: UndefVarError: Args not defined
Stacktrace:
 [1] Base.Broadcast.Broadcasted{Base.Broadcast.Style{Tuple},Axes,F,Args} where Args<:Tuple where F where Axes(::typeof(==), ::Tuple{Tuple{#s216} where #s216<:Int64,Int64}, ::Nothing) at ./broadcast.jl:179 (repeats 2 times)
 [2] broadcasted at ./broadcast.jl:1240 [inlined]
 [3] broadcasted at ./broadcast.jl:1238 [inlined]
 [4] _admissible_permutations(::Gridap.ReferenceFEs.DFace{2}) at /home/565/cm8825/.julia/packages/Gridap/p256b/src/ReferenceFEs/ExtrusionPolytopes.jl:683
 [5] _precompute_vertex_perms_if_possible(::Gridap.ReferenceFEs.DFace{2}) at /home/565/cm8825/.julia/packages/Gridap/p256b/src/ReferenceFEs/ExtrusionPolytopes.jl:670
 [6] Gridap.ReferenceFEs.ExtrusionPolytope(::Gridap.ReferenceFEs.DFace{2}) at /home/565/cm8825/.julia/packages/Gridap/p256b/src/ReferenceFEs/ExtrusionPolytopes.jl:53
 [7] Polytope at /home/565/cm8825/.julia/packages/Gridap/p256b/src/ReferenceFEs/ExtrusionPolytopes.jl:146 [inlined]
 [8] #3 at ./none:0 [inlined]
 [9] iterate at ./generator.jl:47 [inlined]
 [10] collect(::Base.Generator{UnitRange{Int64},Gridap.ReferenceFEs.var"#3#4"{2,Gridap.ReferenceFEs.ExtrusionPolytope{3}}}) at ./array.jl:665
 [11] _compute_reffaces_and_face_types at /home/565/cm8825/.julia/packages/Gridap/p256b/src/ReferenceFEs/Polytopes.jl:592 [inlined]
 [12] get_reffaces(::Type{Gridap.ReferenceFEs.Polytope{2}}, ::Gridap.ReferenceFEs.ExtrusionPolytope{3}) at /home/565/cm8825/.julia/packages/Gridap/p256b/src/ReferenceFEs/Polytopes.jl:552
 [13] #7 at ./array.jl:0 [inlined]
 [14] iterate at ./generator.jl:47 [inlined]
 [15] collect(::Base.Generator{Array{Gridap.ReferenceFEs.ExtrusionPolytope{3},1},Gridap.Geometry.var"#7#9"{2}}) at ./array.jl:665
 [16] compute_reffaces(::Type{Gridap.ReferenceFEs.Polytope{2}}, ::Gridap.Geometry.UnstructuredGridTopology{3,3,Float64,true}) at /home/565/cm8825/.julia/packages/Gridap/p256b/src/Geometry/GridTopologies.jl:318
 [17] get_face_type(::Gridap.Geometry.UnstructuredGridTopology{3,3,Float64,true}, ::Int64) at /home/565/cm8825/.julia/packages/Gridap/p256b/src/Geometry/GridTopologies.jl:308
 [18] _setup_nface_to_mface!(::Gridap.Geometry.UnstructuredGridTopology{3,3,Float64,true}, ::Int64, ::Int64) at /home/565/cm8825/.julia/packages/Gridap/p256b/src/Geometry/UnstructuredGridTopologies.jl:309
 [19] _setup_faces!(::Gridap.Geometry.UnstructuredGridTopology{3,3,Float64,true}, ::Int64, ::Int64) at /home/565/cm8825/.julia/packages/Gridap/p256b/src/Geometry/UnstructuredGridTopologies.jl:199
 [20] get_faces at /home/565/cm8825/.julia/packages/Gridap/p256b/src/Geometry/UnstructuredGridTopologies.jl:164 [inlined]
 [21] _fix_geolabels(::Int64, ::Gridap.Geometry.UnstructuredGridTopology{3,3,Float64,true}, ::Array{Array{Int32,1},1}, ::Int64, ::Int64) at /home/565/cm8825/.julia/packages/Gridap/p256b/src/Geometry/CartesianDiscreteModels.jl:137
 [22] _fill_cartesian_entities!(::Gridap.Geometry.FaceLabeling, ::Gridap.Geometry.UnstructuredGridTopology{3,3,Float64,true}) at /home/565/cm8825/.julia/packages/Gridap/p256b/src/Geometry/CartesianDiscreteModels.jl:130
 [23] _fill_cartesian_face_labeling!(::Gridap.Geometry.FaceLabeling, ::Gridap.Geometry.UnstructuredGridTopology{3,3,Float64,true}) at /home/565/cm8825/.julia/packages/Gridap/p256b/src/Geometry/CartesianDiscreteModels.jl:108
 [24] Gridap.Geometry.CartesianDiscreteModel(::Gridap.Geometry.CartesianDescriptor{3,Float64,typeof(identity)}) at /home/565/cm8825/.julia/packages/Gridap/p256b/src/Geometry/CartesianDiscreteModels.jl:26
 [25] Gridap.Geometry.CartesianDiscreteModel(::NTuple{6,Float64}, ::Vararg{Any,N} where N; kwargs::Base.Iterators.Pairs{Union{},Union{},Tuple{},NamedTuple{(),Tuple{}}}) at /home/565/cm8825/.julia/packages/Gridap/p256b/src/Geometry/CartesianDiscreteModels.jl:69
 [26] Gridap.Geometry.CartesianDiscreteModel(::NTuple{6,Float64}, ::Vararg{Any,N} where N) at /home/565/cm8825/.julia/packages/Gridap/p256b/src/Geometry/CartesianDiscreteModels.jl:68
 [27] FM() at /scratch/bt62/cm8825/MRI_Solver_nt3only/Solver.jl:60
 [28] top-level scope at /scratch/bt62/cm8825/MRI_Solver_nt3only/Solver.jl:321
 [29] include(::Module, ::String) at ./Base.jl:377
 [30] exec_options(::Base.JLOptions) at ./client.jl:288
 [31] _start() at ./client.jl:484
in expression starting at /scratch/bt62/cm8825/MRI_Solver_nt3only/Solver.jl:321
